{"version":3,"file":"static/js/369.7eb1b0b9.chunk.js","mappings":"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","sources":["components/Section/Section.jsx","components/ContactInfo/ContactInfo.jsx","components/ContactsInfo/ContactsInfo.jsx","components/Filter/Filter.jsx","components/ContastsSkeleton/ContastsSkeleton.jsx","utils/contactValidator/contactAddValidator.js","components/ContactForm/ContactForm.jsx","components/Modal/Modal.jsx","pages/Contacts.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Box, Typography } from '@mui/material';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Box\n      component=\"main\"\n      sx={{ marginTop: '12px', marginBottom: '12px', textAlign: 'center' }}\n    >\n      {title && (\n        <Typography\n          variant=\"h4\"\n          component=\"h2\"\n          sx={{ textAlign: 'center', marginBottom: '12px' }}\n        >\n          {title}\n        </Typography>\n      )}\n      {children}\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { deleteContact } from 'redux/Contacts/operations';\n\nimport {\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  IconButton,\n} from '@mui/material';\nimport PhoneIcon from '@mui/icons-material/Phone';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const ContactInfo = ({ _id, name, phone }) => {\n  const dispatch = useDispatch();\n\n  const onDeliteContact = _id => {\n    dispatch(deleteContact(_id));\n  };\n\n  return (\n            <ListItem\n              secondaryAction={\n                <IconButton\n                  edge=\"end\"\n                  aria-label=\"delete\"\n                  onClick={() => {\n                    onDeliteContact(_id);\n                  }}\n                  sx={{ flexGrow: 1, maxWidth: '100%' }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar>\n                  <PhoneIcon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText>\n                {name}: {phone}\n              </ListItemText>\n            </ListItem>\n  );\n};\n\nContactInfo.propTypes = {\n  _id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\n\nimport { ContactInfo } from 'components/ContactInfo/ContactInfo';\n\nimport { List } from '@mui/material';\n\nexport const ContactsInfo = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const toFiltredContacts = () => {\n    const normalizeFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  const filtredContacts = toFiltredContacts();\n\n  return (\n    <List disablePadding sx={{maxWidth: '350px', marginRight: 'auto', marginLeft: 'auto'}}>\n      {filtredContacts.map(contact => (\n        <ContactInfo key={contact._id} {...contact} />\n      ))}\n    </List>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { getFilter } from 'redux/selectors';\nimport { changeFilter } from 'redux/Contacts/filterSlice';\n\nimport {TextField} from '@mui/material';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    const { value } = e.target;\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <TextField\n      id=\"outlined-search\"\n      label=\"Find contact\"\n      type=\"search\"\n      variant=\"filled\"\n      name=\"filter\"\n      value={filter}\n      onChange={handleFilter}\n    />\n  );\n};\n","import { Card, Skeleton } from '@mui/material';\n\nexport function ContastsSkeleton() {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        maxWidth: '318px',\n        marginTop: '24px',\n      }}\n    >\n      {[1, 2, 3, 4, 5].map(item => (\n        <Card\n          key={item}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: '16px',\n            marginBottom: '20px',\n            boxShadow: 'none',\n          }}\n        >\n          <Skeleton variant=\"circular\" width={40} height={40} />\n          <Skeleton variant=\"rounded\" width={230} height={24} />\n          <Skeleton variant=\"circular\" width={24} height={24} />\n        </Card>\n      ))}\n    </div>\n  );\n}\n","const Joi = require('joi');\n\nexport const contactAddValidator = Joi.object({\n  contactName: Joi.string().min(3).max(30).required().messages({\n    'string.base': `Name should be a type of string`,\n    'string.min': `Name must contain min 3 simbols`,\n    'string.max': `Name must contain max 30 simbols`,\n    'any.required': `Name is a required field`,\n  }),\n  contactPhone: Joi.string().min(12).max(17).required().messages({\n    'string.base': `Phone should contain numbers, \"(\", \")\", \"+\"`,\n    'string.min': `Phone must contain min 12 simbols`,\n    'string.max': `Phone must contain max 17 simbols`,\n    'any.required': `Phone is a required field`,\n  }),\n});\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { joiResolver } from '@hookform/resolvers/joi';\n\nimport { getContacts } from 'redux/selectors';\nimport { addContact } from 'redux/Contacts/operations';\nimport { contactAddValidator } from 'utils/contactValidator/contactAddValidator';\n\nimport { Button, Box, TextField, FormControl, Typography } from '@mui/material';\n\nexport function ContactForm({ toggleModal }) {\n  const [contactName, setContactName] = useState('');\n  const [contactPhone, setContactPhone] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'contactName':\n        setContactName(value);\n        break;\n      case 'contactPhone':\n        setContactPhone(value);\n        break;\n      default:\n        setContactName('');\n        setContactPhone('');\n        break;\n    }\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: joiResolver(contactAddValidator),\n  });\n\n  const handleAddContact = ({ contactName, contactPhone }) => {\n    const normalizeNewContactName = contactName.toLowerCase();\n\n    contacts.find(\n      contact => contact.name.toLowerCase() === normalizeNewContactName\n    )\n      ? alert(`${contactName} is already incontacts`)\n      : dispatch(addContact({ name: contactName, phone: contactPhone }));\n\n    setContactName('');\n    setContactPhone('');\n    toggleModal();\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{ '& .MuiTextField-root': { m: 1, width: '25ch' }, padding: '12px' }}\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(handleAddContact)}\n    >\n      <Typography\n        variant=\"h6\"\n        component=\"h3\"\n        align=\"center\"\n        color=\"primary\"\n        mb={2}\n      >\n        {' '}\n        Create new contact\n      </Typography>\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n        <FormControl>\n          <TextField\n            {...register('contactName')}\n            type=\"text\"\n            name=\"contactName\"\n            label=\"Name\"\n            onChange={handleChange}\n            value={contactName}\n            required\n          />\n          <Typography\n            variant=\"body2\"\n            component=\"p\"\n            style={{ color: 'red', paddingLeft: '12px' }}\n          >\n            {errors.contactName?.message}\n          </Typography>\n        </FormControl>\n        <FormControl>\n          <TextField\n            {...register('contactPhone')}\n            required\n            type=\"tel\"\n            label=\"Phone\"\n            name=\"contactPhone\"\n            onChange={handleChange}\n            value={contactPhone}\n          />\n          <Typography\n            variant=\"body2\"\n            component=\"p\"\n            style={{ color: 'red', paddingLeft: '12px' }}\n          >\n            {errors.contactPhone?.message}\n          </Typography>\n        </FormControl>\n      </Box>\n\n      <Button\n        size=\"small\"\n        type=\"submit\"\n        text=\"Add contact\"\n        style={{ marginLeft: '8px', marginTop: '8px' }}\n      >\n        Add contact\n      </Button>\n    </Box>\n  );\n}\n\nContactForm.propTypes = {\n  toggleModal: PropTypes.func,\n};\n","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport PropTypes from 'prop-types';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nimport { Backdrop, Box, Modal, Fade, IconButton } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst modalRoot = document.getElementById('modal-root');\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n  borderColor: 'primary',\n};\n\nexport function ModalWindow({ toggleModal, isModalOpen }) {\n  useEffect(() => {\n    window.addEventListener('keydown', handleEsc);\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  });\n\n  const handleEsc = e => {\n    if (e.code === 'Escape') {\n      toggleModal();\n    }\n  };\n\n  const handleBackdrop = e => {\n    if (e.currentTarget === e.target) {\n      toggleModal();\n    }\n  };\n\n  const handleClose = e => {\n    toggleModal();\n  };\n\n  return createPortal(\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={isModalOpen}\n      onClose={handleBackdrop}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={isModalOpen}>\n        <Box sx={style}>\n          <IconButton sx={{ left: '90%' }}  onClick={handleClose} aria-label=\"add an alarm\">\n            <CloseIcon />\n          </IconButton>\n          <ContactForm toggleModal={toggleModal} />\n        </Box>\n      </Fade>\n    </Modal>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  toggleModal: PropTypes.func,\n  src: PropTypes.string,\n};\n","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchContacts } from 'redux/Contacts/operations';\nimport { getIsLoading, getError } from 'redux/selectors';\nimport { Section } from 'components/Section/Section';\nimport { ContactsInfo } from 'components/ContactsInfo/ContactsInfo';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContastsSkeleton } from 'components/ContastsSkeleton/ContastsSkeleton';\nimport { ModalWindow } from 'components/Modal/Modal';\n\nimport { Button } from '@mui/material';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport SearchIcon from '@mui/icons-material/Search';\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const toggleModal = () => setIsModalOpen(!isModalOpen);\n\n  const handleOpenModal = () => {\n    toggleModal();\n  };\n\n  const toggleFilter = () => setIsFilterOpen(!isFilterOpen);\n\n  const handleOpenFilter = () => {\n    toggleFilter();\n  };\n\n  return (\n    <>\n      <Section title='My contacts'>\n        <div style={{ marginBottom: '12px' }}>\n          <Button type=\"button\" onClick={handleOpenModal}>\n            <AddCircleIcon color=\"primary\" fontSize=\"large\" />\n          </Button>\n          <Button type=\"button\" onClick={handleOpenFilter}>\n            <SearchIcon color=\"primary\" fontSize=\"large\" />\n          </Button>\n        </div>\n        {isFilterOpen && <Filter />}\n\n        {isLoading && !error && \n        <ContastsSkeleton/>}\n\n        {!isLoading && <ContactsInfo />}\n      </Section>\n\n      {isModalOpen && (\n        <ModalWindow isModalOpen={isModalOpen} toggleModal={toggleModal} />\n      )}\n    </>\n  );\n}\nexport default Contacts;\n"],"names":["Section","title","children","Box","component","sx","marginTop","marginBottom","textAlign","Typography","variant","ContactInfo","_id","name","phone","dispatch","useDispatch","ListItem","secondaryAction","IconButton","edge","onClick","deleteContact","onDeliteContact","flexGrow","maxWidth","Delete","ListItemAvatar","Avatar","Phone","ListItemText","ContactsInfo","contacts","useSelector","getContacts","filter","getFilter","filtredContacts","normalizeFilter","toLowerCase","contact","includes","toFiltredContacts","List","disablePadding","marginRight","marginLeft","map","Filter","TextField","id","label","type","value","onChange","e","target","changeFilter","ContastsSkeleton","style","display","flexDirection","item","Card","alignItems","gap","boxShadow","Skeleton","width","height","Joi","require","contactAddValidator","object","contactName","string","min","max","required","messages","contactPhone","ContactForm","toggleModal","useState","setContactName","setContactPhone","handleChange","useForm","resolver","joiResolver","register","handleSubmit","errors","formState","m","padding","noValidate","autoComplete","onSubmit","normalizeNewContactName","find","alert","addContact","align","color","mb","FormControl","paddingLeft","message","Button","size","text","modalRoot","document","getElementById","position","top","left","transform","bgcolor","border","p","borderColor","ModalWindow","isModalOpen","useEffect","window","addEventListener","handleEsc","removeEventListener","code","createPortal","Modal","open","onClose","currentTarget","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Close","PropTypes","src","isLoading","getIsLoading","error","getError","setIsModalOpen","isFilterOpen","setIsFilterOpen","fetchContacts","AddCircle","fontSize","Search"],"sourceRoot":""}