{"version":3,"file":"static/js/357.e0ef6fb7.chunk.js","mappings":"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","sources":["utils/userRegisterValidator.js","pages/Register.jsx"],"sourcesContent":["const Joi = require('joi');\n\nexport const userRegisterValidator = Joi.object({\n  userName: Joi.string().min(3).max(30).required().messages({\n    'string.base': `Name should be a type of string`,\n    'string.min': `Name must contain min 3 simbols`,\n    'string.max': `Name must contain max 30 simbols`,\n    'any.required': `Name is a required field`,\n  }),\n  userEmail: Joi.string()\n    .email({\n      minDomainSegments: 2,\n      tlds: { allow: ['com', 'net', 'ua'] },\n    })\n    .required()\n    .messages({\n      'string.email': `Email should contain @ and current domen (com, net or ua)`,\n      'string.email.tlds': `Email should in com, net or ua domen`,\n      'any.required': `Email is a required field`,\n    }),\n  userPassword: Joi.string()\n    .min(6)\n    .max(300)\n    .pattern(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\\\$%\\\\^&\\\\*])(?=.{6,300})/\n    )\n    .required()\n    .messages({\n      'string.base': `Password should be a type of string`,\n      'string.min': `Password must contain min 6 simbols`,\n      'string.max': `Password must contain max 300 simbols`,\n      'string.pattern.base': `Password must contain a number, a letter in lower and upper case and symbol !@#$%^&*`,\n      'any.required': `Password is a required field`,\n    }),\n});\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { joiResolver } from '@hookform/resolvers/joi';\n\nimport { registerUser } from 'redux/Auth/authOperations';\nimport { useAuth } from 'redux/Auth/useAuth';\nimport { userRegisterValidator } from 'utils/userRegisterValidator';\n\nimport { Loader } from 'components/Loader/Loader';\n\nimport {\n  Box,\n  Card,\n  Container,\n  CardContent,\n  Button,\n  TextField,\n  Typography,\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  IconButton,\n} from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\n\nfunction Register() {\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userPassword, setUserPassword] = useState('');\n\n  const dispatch = useDispatch();\n\n  const { isLoading } = useAuth();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'userName':\n        setUserName(value);\n        break;\n      case 'userEmail':\n        setUserEmail(value);\n        break;\n      case 'userPassword':\n        setUserPassword(value);\n        break;\n      default:\n        setUserName('');\n        setUserEmail('');\n        setUserPassword('');\n        break;\n    }\n  };\n  \n  const { register, handleSubmit, formState: { errors }} = useForm({\n    resolver: joiResolver(userRegisterValidator),\n  });\n\n  const handleRegister = ({ userName, userEmail, userPassword }) => {\n    dispatch(\n      registerUser({\n        name: userName,\n        email: userEmail,\n        password: userPassword,\n      })\n    );\n  };\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  return isLoading ? (\n    <Loader />\n  ) : (\n    <Container component=\"main\" maxWidth=\"xl\">\n      <Typography\n        variant=\"h5\"\n        component=\"h2\"\n        align=\"center\"\n        color=\"primary\"\n        mt={4}\n        sx={{ fontWeight: '700' }}\n      >\n        Don't have an account yet? <br /> Register and start working with\n        contacts!\n      </Typography>\n      <Card\n        sx={{\n          maxWidth: 375,\n          marginRight: 'auto',\n          marginLeft: 'auto',\n          marginTop: '32px',\n        }}\n      >\n        <CardContent>\n          <Box\n            component=\"form\"\n            autoComplete=\"off\"\n            onSubmit={handleSubmit(handleRegister)}\n            noValidate\n            sx={{ '& .MuiTextField-root': { m: 1, width: '25ch' } }}\n          >\n            <FormControl>\n              <TextField\n                {...register('userName')}\n                required\n                label=\"Name\"\n                autoComplete=\"on\"\n                type=\"text\"\n                name=\"userName\"\n                onChange={handleChange}\n                value={userName}\n                style={{ width: '38ch' }}\n              />\n              <Typography variant='body2' component='p' style={{color: 'red', paddingLeft: '12px'}}>{errors.userName?.message}</Typography>\n            </FormControl>\n\n            <FormControl>\n              <TextField\n                {...register('userEmail')}\n                label=\"Email\"\n                autoComplete=\"on\"\n                type=\"email\"\n                name=\"userEmail\"\n                onChange={handleChange}\n                value={userEmail}\n                style={{ width: '38ch' }}\n              />\n              <Typography variant='body2' component='p' style={{color: 'red', paddingLeft: '12px'}}>{errors.userEmail?.message}</Typography>\n            </FormControl>\n\n            <FormControl sx={{ m: 1, width: '38ch' }} variant=\"outlined\">\n              <InputLabel htmlFor=\"outlined-adornment-password\" required>\n                Password\n              </InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-password\"\n                type={showPassword ? 'text' : 'password'}\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={handleClickShowPassword}\n                      onMouseDown={handleMouseDownPassword}\n                      edge=\"end\"\n                    >\n                      {showPassword ? <VisibilityOff /> : <Visibility />}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                {...register('userPassword')}\n                label=\"Password\"\n                name=\"userPassword\"\n                onChange={handleChange}\n                value={userPassword}\n                autoComplete=\"current-password\"\n              />\n              <Typography variant='body2' component='p' style={{color: 'red', paddingLeft: '12px'}}>{errors.userPassword?.message}</Typography>\n            </FormControl>\n\n            <Button\n              size=\"small\"\n              type=\"submit\"\n              text=\"Register\"\n              style={{ marginLeft: '8px', marginTop: '12px' }}\n            >\n              Register\n            </Button>\n          </Box>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n}\n\nexport default Register;\n"],"names":["Joi","require","userRegisterValidator","object","userName","string","min","max","required","messages","userEmail","email","minDomainSegments","tlds","allow","userPassword","pattern","useState","setUserName","setUserEmail","setUserPassword","dispatch","useDispatch","isLoading","useAuth","handleChange","e","target","name","value","useForm","resolver","joiResolver","register","handleSubmit","errors","formState","showPassword","setShowPassword","Loader","Container","component","maxWidth","Typography","variant","align","color","mt","sx","fontWeight","Card","marginRight","marginLeft","marginTop","CardContent","Box","autoComplete","onSubmit","registerUser","password","noValidate","m","width","FormControl","TextField","label","type","onChange","style","paddingLeft","message","InputLabel","htmlFor","OutlinedInput","id","endAdornment","InputAdornment","position","IconButton","onClick","show","onMouseDown","event","preventDefault","edge","VisibilityOff","Visibility","Button","size","text"],"sourceRoot":""}