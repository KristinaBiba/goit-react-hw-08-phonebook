{"version":3,"file":"static/js/369.7d9a6526.chunk.js","mappings":"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","sources":["components/Section/Section.jsx","components/Modal/Modal.jsx","utils/contactValidator/contactAddValidator.js","components/ContactForm/ContactForm.jsx","components/ContactInfo/ContactInfo.jsx","components/ContactsInfo/ContactsInfo.jsx","components/Filter/Filter.jsx","components/ContastsSkeleton/ContastsSkeleton.jsx","pages/Contacts.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Box, Typography } from '@mui/material';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Box\n      component=\"main\"\n      sx={{ marginTop: '12px', marginBottom: '12px', textAlign: 'center' }}\n    >\n      {title && (\n        <Typography\n          variant=\"h4\"\n          component=\"h2\"\n          sx={{ textAlign: 'center', marginBottom: '12px' }}\n        >\n          {title}\n        </Typography>\n      )}\n      {children}\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport PropTypes from 'prop-types';\n\nimport { Backdrop, Box, Modal, Fade, IconButton } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst modalRoot = document.getElementById('modal-root');\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n  borderColor: 'primary',\n};\n\nexport function ModalWindow({ toggleModal, isModalOpen, children }) {\n  useEffect(() => {\n    window.addEventListener('keydown', handleEsc);\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  });\n\n  const handleEsc = e => {\n    if (e.code === 'Escape') {\n      toggleModal();\n    }\n  };\n\n  const handleBackdrop = e => {\n    if (e.currentTarget === e.target) {\n      toggleModal();\n    }\n  };\n\n  const handleClose = e => {\n    toggleModal();\n  };\n\n  return createPortal(\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={isModalOpen}\n      onClose={handleBackdrop}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={isModalOpen}>\n        <Box sx={style}>\n          <IconButton sx={{ left: '90%' }}  onClick={handleClose} aria-label=\"add an alarm\">\n            <CloseIcon />\n          </IconButton>\n          {children}\n        </Box>\n      </Fade>\n    </Modal>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  toggleModal: PropTypes.func,\n  src: PropTypes.string,\n};\n","const Joi = require('joi');\n\nexport const contactAddValidator = Joi.object({\n  contactName: Joi.string().min(3).max(30).required().messages({\n    'string.base': `Name should be a type of string`,\n    'string.min': `Name must contain min 3 simbols`,\n    'string.max': `Name must contain max 30 simbols`,\n    'any.required': `Name is a required field`,\n  }),\n  contactPhone: Joi.string().min(12).max(17).required().messages({\n    'string.base': `Phone should contain numbers, \"(\", \")\", \"+\"`,\n    'string.min': `Phone must contain min 12 simbols`,\n    'string.max': `Phone must contain max 17 simbols`,\n    'any.required': `Phone is a required field`,\n  }),\n});\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { Controller, useForm } from 'react-hook-form';\nimport { joiResolver } from '@hookform/resolvers/joi';\n\nimport { getContacts } from 'redux/selectors';\nimport { addContact, editContact } from 'redux/Contacts/operations';\nimport { contactAddValidator } from 'utils/contactValidator/contactAddValidator';\n\nimport { Button, Box, TextField, FormControl, Typography } from '@mui/material';\n\nexport function ContactForm({ toggleModal, edit, id }) {\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  let editContactName = '';\n  let editContactPhone = '';\n\n  if (edit) {\n    const editContact = contacts.find(contact => contact._id === id);\n    editContactName = editContact.name;\n    editContactPhone = editContact.phone;\n  }\n \n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      contactName: `${editContactName}`,\n      contactPhone: `${editContactPhone}`,\n    },\n    resolver: joiResolver(contactAddValidator),\n  });\n\n  const handleAddContact = ({contactName, contactPhone}) => {\n    const normalizeNewContactName = contactName.toLowerCase();\n\n    if (edit) {\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === normalizeNewContactName &&\n          contact._id !== id\n      )\n        ? alert(`${contactName} is already incontacts`)\n        : dispatch(\n            editContact({ name: contactName, phone: contactPhone, id: id })\n          );\n    } else {\n      contacts.find(\n        contact => contact.name.toLowerCase() === normalizeNewContactName\n      )\n        ? alert(`${contactName} is already incontacts`)\n        : dispatch(addContact({ name: contactName, phone: contactPhone }));\n    }\n    toggleModal();\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{ '& .MuiTextField-root': { m: 1, width: '25ch' }, padding: '12px' }}\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(handleAddContact)}\n    >\n      <Typography\n        variant=\"h6\"\n        component=\"h3\"\n        align=\"center\"\n        color=\"primary\"\n        mb={2}\n      >\n        {edit ? 'Edit contact' : 'Create new contact'}\n      </Typography>\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n        <FormControl>\n          <Controller\n            render={({ field }) => <TextField {...field} label=\"Name\" />}\n            name=\"contactName\"\n            control={control}\n            required\n          />\n          <Typography\n            variant=\"body2\"\n            component=\"p\"\n            style={{ color: 'red', paddingLeft: '12px' }}\n          >\n            {errors.contactName?.message}\n          </Typography>\n        </FormControl>\n        <FormControl>\n          <Controller\n            render={({ field }) => <TextField {...field} label=\"Phone\" />}\n            name=\"contactPhone\"\n            control={control}\n            required\n            type=\"tel\"\n            label=\"Phone\"\n          />\n          <Typography\n            variant=\"body2\"\n            component=\"p\"\n            style={{ color: 'red', paddingLeft: '12px' }}\n          >\n            {errors.contactPhone?.message}\n          </Typography>\n        </FormControl>\n      </Box>\n\n      <Button\n        size=\"small\"\n        type=\"submit\"\n        text=\"Add contact\"\n        style={{ marginLeft: '8px', marginTop: '8px' }}\n      >\n        {edit ? 'Save changes' : 'Add contact'}\n      </Button>\n    </Box>\n  );\n}\n\nContactForm.propTypes = {\n  toggleModal: PropTypes.func,\n  edit: PropTypes.bool,\n  id: PropTypes.string,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { deleteContact } from 'redux/Contacts/operations';\n\nimport { ModalWindow } from 'components/Modal/Modal';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nimport {\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  IconButton,\n} from '@mui/material';\nimport PhoneIcon from '@mui/icons-material/Phone';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\n\nexport const ContactInfo = ({ _id, name, phone }) => {\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleModal = () => setIsModalOpen(!isModalOpen);\n\n  const dispatch = useDispatch();\n\n  const onDeliteContact = _id => {\n    dispatch(deleteContact(_id));\n  };\n\n  return (\n    <>\n            <ListItem\n              secondaryAction={\n                <>\n                <IconButton\n                  aria-label=\"edit\"\n                  onClick={() => {\n                    toggleModal();\n                  }}\n                  sx={{ flexGrow: 1, maxWidth: '100%' }}\n                >\n                  <EditIcon />\n                </IconButton>\n                <IconButton\n                  edge=\"end\"\n                  aria-label=\"delete\"\n                  onClick={() => {\n                    onDeliteContact(_id);\n                  }}\n                  sx={{ flexGrow: 1, maxWidth: '100%' }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n                </>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar>\n                  <PhoneIcon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText>\n                {name}: {phone}\n              </ListItemText>\n            </ListItem>\n\n{isModalOpen && (\n  <ModalWindow isModalOpen={isModalOpen} toggleModal={toggleModal}>\n    <ContactForm toggleModal={toggleModal} edit id={_id}/>\n  </ModalWindow>\n  \n)}\n  </>);\n};\n\nContactInfo.propTypes = {\n  _id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\n\nimport { ContactInfo } from 'components/ContactInfo/ContactInfo';\n\nimport { List } from '@mui/material';\n\nexport const ContactsInfo = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const toFiltredContacts = () => {\n    const normalizeFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  const filtredContacts = toFiltredContacts();\n\n  return (\n    <List disablePadding sx={{maxWidth: '400px', marginRight: 'auto', marginLeft: 'auto'}}>\n      {filtredContacts.map(contact => (\n        <ContactInfo key={contact._id} {...contact} />\n      ))}\n    </List>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { getFilter } from 'redux/selectors';\nimport { changeFilter } from 'redux/Contacts/filterSlice';\n\nimport {TextField} from '@mui/material';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    const { value } = e.target;\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <TextField\n      id=\"outlined-search\"\n      label=\"Find contact\"\n      type=\"search\"\n      variant=\"filled\"\n      name=\"filter\"\n      value={filter}\n      onChange={handleFilter}\n    />\n  );\n};\n","import { Card, Skeleton } from '@mui/material';\n\nexport function ContastsSkeleton() {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        maxWidth: '318px',\n        marginTop: '24px',\n      }}\n    >\n      {[1, 2, 3, 4, 5].map(item => (\n        <Card\n          key={item}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: '16px',\n            marginBottom: '20px',\n            boxShadow: 'none',\n          }}\n        >\n          <Skeleton variant=\"circular\" width={40} height={40} />\n          <Skeleton variant=\"rounded\" width={230} height={24} />\n          <Skeleton variant=\"circular\" width={24} height={24} />\n        </Card>\n      ))}\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchContacts } from 'redux/Contacts/operations';\nimport { getIsLoading, getError } from 'redux/selectors';\nimport { Section } from 'components/Section/Section';\nimport { ContactsInfo } from 'components/ContactsInfo/ContactsInfo';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContastsSkeleton } from 'components/ContastsSkeleton/ContastsSkeleton';\nimport { ModalWindow } from 'components/Modal/Modal';\n\nimport { Button } from '@mui/material';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const toggleModal = () => setIsModalOpen(!isModalOpen);\n\n  const handleOpenModal = () => {\n    toggleModal();\n  };\n\n  const toggleFilter = () => setIsFilterOpen(!isFilterOpen);\n\n  const handleOpenFilter = () => {\n    toggleFilter();\n  };\n\n  return (\n    <>\n      <Section title=\"My contacts\">\n        <div style={{ marginBottom: '12px' }}>\n          <Button type=\"button\" onClick={handleOpenModal}>\n            <AddCircleIcon color=\"primary\" fontSize=\"large\" />\n          </Button>\n          <Button type=\"button\" onClick={handleOpenFilter}>\n            <SearchIcon color=\"primary\" fontSize=\"large\" />\n          </Button>\n        </div>\n        {isFilterOpen && <Filter />}\n\n        {isLoading && !error && <ContastsSkeleton />}\n\n        {!isLoading && <ContactsInfo />}\n      </Section>\n\n      {isModalOpen && (\n        <ModalWindow isModalOpen={isModalOpen} toggleModal={toggleModal}>\n          <ContactForm toggleModal={toggleModal} />\n        </ModalWindow>\n      )}\n    </>\n  );\n}\nexport default Contacts;\n"],"names":["Section","title","children","Box","component","sx","marginTop","marginBottom","textAlign","Typography","variant","modalRoot","document","getElementById","style","position","top","left","transform","bgcolor","border","boxShadow","p","borderColor","ModalWindow","toggleModal","isModalOpen","useEffect","window","addEventListener","handleEsc","removeEventListener","e","code","createPortal","Modal","open","onClose","currentTarget","target","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","IconButton","onClick","Close","PropTypes","src","Joi","require","contactAddValidator","object","contactName","string","min","max","required","messages","contactPhone","ContactForm","edit","id","contacts","useSelector","getContacts","dispatch","useDispatch","editContactName","editContactPhone","editContact","find","contact","_id","name","phone","useForm","defaultValues","resolver","joiResolver","control","handleSubmit","errors","formState","m","width","padding","noValidate","autoComplete","onSubmit","normalizeNewContactName","toLowerCase","alert","addContact","align","color","mb","display","flexDirection","gap","FormControl","render","field","TextField","label","paddingLeft","message","type","Button","size","text","marginLeft","ContactInfo","useState","setIsModalOpen","ListItem","secondaryAction","flexGrow","maxWidth","Edit","edge","deleteContact","onDeliteContact","Delete","ListItemAvatar","Avatar","Phone","ListItemText","ContactsInfo","filter","getFilter","filtredContacts","normalizeFilter","includes","toFiltredContacts","List","disablePadding","marginRight","map","Filter","value","onChange","changeFilter","ContastsSkeleton","item","Card","alignItems","Skeleton","height","isLoading","getIsLoading","error","getError","isFilterOpen","setIsFilterOpen","fetchContacts","AddCircle","fontSize","Search"],"sourceRoot":""}