{"version":3,"file":"static/js/369.00d2e4cc.chunk.js","mappings":"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","sources":["components/Section/Section.jsx","components/Modal/Modal.jsx","utils/contactValidator/contactAddValidator.js","components/ContactForm/ContactForm.jsx","components/ContactInfo/ContactInfo.jsx","components/ContactsInfo/ContactsInfo.jsx","components/Filter/Filter.jsx","components/ContastsSkeleton/ContastsSkeleton.jsx","pages/Contacts.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Box, Typography } from '@mui/material';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Box\n      component=\"main\"\n      sx={{ marginTop: '12px', marginBottom: '12px', textAlign: 'center' }}\n    >\n      {title && (\n        <Typography\n          variant=\"h4\"\n          component=\"h2\"\n          sx={{ textAlign: 'center', marginBottom: '12px' }}\n        >\n          {title}\n        </Typography>\n      )}\n      {children}\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport PropTypes from 'prop-types';\n\nimport { Backdrop, Box, Modal, Fade, IconButton } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst modalRoot = document.getElementById('modal-root');\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n  borderColor: 'primary',\n};\n\nexport function ModalWindow({ toggleModal, isModalOpen, children }) {\n  useEffect(() => {\n    window.addEventListener('keydown', handleEsc);\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc);\n    };\n  });\n\n  const handleEsc = e => {\n    if (e.code === 'Escape') {\n      toggleModal();\n    }\n  };\n\n  const handleBackdrop = e => {\n    if (e.currentTarget === e.target) {\n      toggleModal();\n    }\n  };\n\n  const handleClose = e => {\n    toggleModal();\n  };\n\n  return createPortal(\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={isModalOpen}\n      onClose={handleBackdrop}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={isModalOpen}>\n        <Box sx={style}>\n          <IconButton sx={{ left: '90%' }}  onClick={handleClose} aria-label=\"add an alarm\">\n            <CloseIcon />\n          </IconButton>\n          {children}\n        </Box>\n      </Fade>\n    </Modal>,\n    modalRoot\n  );\n}\n\nModal.propTypes = {\n  toggleModal: PropTypes.func,\n  src: PropTypes.string,\n};\n","const Joi = require('joi');\n\nexport const contactAddValidator = Joi.object({\n  contactName: Joi.string().min(3).max(30).required().messages({\n    'string.base': `Name should be a type of string`,\n    'string.min': `Name must contain min 3 simbols`,\n    'string.max': `Name must contain max 30 simbols`,\n    'any.required': `Name is a required field`,\n  }),\n  contactPhone: Joi.string().min(12).max(17).required().messages({\n    'string.base': `Phone should contain numbers, \"(\", \")\", \"+\"`,\n    'string.min': `Phone must contain min 12 simbols`,\n    'string.max': `Phone must contain max 17 simbols`,\n    'any.required': `Phone is a required field`,\n  }),\n});\n","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { joiResolver } from '@hookform/resolvers/joi';\n\nimport { getContacts } from 'redux/selectors';\nimport { addContact, editContact } from 'redux/Contacts/operations';\nimport { contactAddValidator } from 'utils/contactValidator/contactAddValidator';\n\nimport { Button, Box, TextField, FormControl, Typography } from '@mui/material';\n\nexport function ContactForm({ toggleModal, edit, id }) {\n  const [contactName, setContactName] = useState('');\n  const [contactPhone, setContactPhone] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (edit) {\n      const editContact = contacts.find(contact => contact._id === id);\n      setContactName(editContact.name);\n      setContactPhone(editContact.phone);\n    }\n  }, [edit, id, contacts]);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'contactName':\n        setContactName(value);\n        break;\n      case 'contactPhone':\n        setContactPhone(value);\n        break;\n      default:\n        setContactName('');\n        setContactPhone('');\n        break;\n    }\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: joiResolver(contactAddValidator),\n  });\n\n  const handleAddContact = () => {\n    const normalizeNewContactName = contactName.toLowerCase();\n\n    if (edit) {\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === normalizeNewContactName &&\n          contact._id !== id\n      )\n        ? alert(`${contactName} is already incontacts`)\n        : dispatch(\n            editContact({ name: contactName, phone: contactPhone, id: id })\n          );\n    } else {\n      contacts.find(\n        contact => contact.name.toLowerCase() === normalizeNewContactName\n      )\n        ? alert(`${contactName} is already incontacts`)\n        : dispatch(addContact({ name: contactName, phone: contactPhone }));\n    }\n\n    setContactName('');\n    setContactPhone('');\n    toggleModal();\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{ '& .MuiTextField-root': { m: 1, width: '25ch' }, padding: '12px' }}\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(handleAddContact)}\n    >\n      <Typography\n        variant=\"h6\"\n        component=\"h3\"\n        align=\"center\"\n        color=\"primary\"\n        mb={2}\n      >\n        {edit ? 'Edit contact' : 'Create new contact'}\n      </Typography>\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>\n        <FormControl>\n          <TextField\n            {...register('contactName')}\n            type=\"text\"\n            name=\"contactName\"\n            label=\"Name\"\n            onChange={handleChange}\n            value={contactName}\n            required\n          />\n          <Typography\n            variant=\"body2\"\n            component=\"p\"\n            style={{ color: 'red', paddingLeft: '12px' }}\n          >\n            {errors.contactName?.message}\n          </Typography>\n        </FormControl>\n        <FormControl>\n          <TextField\n            {...register('contactPhone')}\n            required\n            type=\"tel\"\n            label=\"Phone\"\n            name=\"contactPhone\"\n            onChange={handleChange}\n            value={contactPhone}\n          />\n          <Typography\n            variant=\"body2\"\n            component=\"p\"\n            style={{ color: 'red', paddingLeft: '12px' }}\n          >\n            {errors.contactPhone?.message}\n          </Typography>\n        </FormControl>\n      </Box>\n\n      <Button\n        size=\"small\"\n        type=\"submit\"\n        text=\"Add contact\"\n        style={{ marginLeft: '8px', marginTop: '8px' }}\n      >\n        {edit ? 'Save changes' : 'Add contact'}\n      </Button>\n    </Box>\n  );\n}\n\nContactForm.propTypes = {\n  toggleModal: PropTypes.func,\n  edit: PropTypes.bool,\n  id: PropTypes.string,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { deleteContact } from 'redux/Contacts/operations';\n\nimport { ModalWindow } from 'components/Modal/Modal';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nimport {\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Avatar,\n  IconButton,\n} from '@mui/material';\nimport PhoneIcon from '@mui/icons-material/Phone';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\n\nexport const ContactInfo = ({ _id, name, phone }) => {\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleModal = () => setIsModalOpen(!isModalOpen);\n\n  const dispatch = useDispatch();\n\n  const onDeliteContact = _id => {\n    dispatch(deleteContact(_id));\n  };\n\n  return (\n    <>\n            <ListItem\n              secondaryAction={\n                <>\n                <IconButton\n                  aria-label=\"edit\"\n                  onClick={() => {\n                    toggleModal();\n                  }}\n                  sx={{ flexGrow: 1, maxWidth: '100%' }}\n                >\n                  <EditIcon />\n                </IconButton>\n                <IconButton\n                  edge=\"end\"\n                  aria-label=\"delete\"\n                  onClick={() => {\n                    onDeliteContact(_id);\n                  }}\n                  sx={{ flexGrow: 1, maxWidth: '100%' }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n                </>\n              }\n            >\n              <ListItemAvatar>\n                <Avatar>\n                  <PhoneIcon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText>\n                {name}: {phone}\n              </ListItemText>\n            </ListItem>\n\n{isModalOpen && (\n  <ModalWindow isModalOpen={isModalOpen} toggleModal={toggleModal}>\n    <ContactForm toggleModal={toggleModal} edit id={_id}/>\n  </ModalWindow>\n  \n)}\n  </>);\n};\n\nContactInfo.propTypes = {\n  _id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\n\nimport { ContactInfo } from 'components/ContactInfo/ContactInfo';\n\nimport { List } from '@mui/material';\n\nexport const ContactsInfo = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const toFiltredContacts = () => {\n    const normalizeFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter)\n    );\n  };\n\n  const filtredContacts = toFiltredContacts();\n\n  return (\n    <List disablePadding sx={{maxWidth: '350px', marginRight: 'auto', marginLeft: 'auto'}}>\n      {filtredContacts.map(contact => (\n        <ContactInfo key={contact._id} {...contact} />\n      ))}\n    </List>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { getFilter } from 'redux/selectors';\nimport { changeFilter } from 'redux/Contacts/filterSlice';\n\nimport {TextField} from '@mui/material';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    const { value } = e.target;\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <TextField\n      id=\"outlined-search\"\n      label=\"Find contact\"\n      type=\"search\"\n      variant=\"filled\"\n      name=\"filter\"\n      value={filter}\n      onChange={handleFilter}\n    />\n  );\n};\n","import { Card, Skeleton } from '@mui/material';\n\nexport function ContastsSkeleton() {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        maxWidth: '318px',\n        marginTop: '24px',\n      }}\n    >\n      {[1, 2, 3, 4, 5].map(item => (\n        <Card\n          key={item}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: '16px',\n            marginBottom: '20px',\n            boxShadow: 'none',\n          }}\n        >\n          <Skeleton variant=\"circular\" width={40} height={40} />\n          <Skeleton variant=\"rounded\" width={230} height={24} />\n          <Skeleton variant=\"circular\" width={24} height={24} />\n        </Card>\n      ))}\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchContacts } from 'redux/Contacts/operations';\nimport { getIsLoading, getError } from 'redux/selectors';\nimport { Section } from 'components/Section/Section';\nimport { ContactsInfo } from 'components/ContactsInfo/ContactsInfo';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContastsSkeleton } from 'components/ContastsSkeleton/ContastsSkeleton';\nimport { ModalWindow } from 'components/Modal/Modal';\n\nimport { Button } from '@mui/material';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const toggleModal = () => setIsModalOpen(!isModalOpen);\n\n  const handleOpenModal = () => {\n    toggleModal();\n  };\n\n  const toggleFilter = () => setIsFilterOpen(!isFilterOpen);\n\n  const handleOpenFilter = () => {\n    toggleFilter();\n  };\n\n  return (\n    <>\n      <Section title=\"My contacts\">\n        <div style={{ marginBottom: '12px' }}>\n          <Button type=\"button\" onClick={handleOpenModal}>\n            <AddCircleIcon color=\"primary\" fontSize=\"large\" />\n          </Button>\n          <Button type=\"button\" onClick={handleOpenFilter}>\n            <SearchIcon color=\"primary\" fontSize=\"large\" />\n          </Button>\n        </div>\n        {isFilterOpen && <Filter />}\n\n        {isLoading && !error && <ContastsSkeleton />}\n\n        {!isLoading && <ContactsInfo />}\n      </Section>\n\n      {isModalOpen && (\n        <ModalWindow isModalOpen={isModalOpen} toggleModal={toggleModal}>\n          <ContactForm toggleModal={toggleModal} />\n        </ModalWindow>\n      )}\n    </>\n  );\n}\nexport default Contacts;\n"],"names":["Section","title","children","Box","component","sx","marginTop","marginBottom","textAlign","Typography","variant","modalRoot","document","getElementById","style","position","top","left","transform","bgcolor","border","boxShadow","p","borderColor","ModalWindow","toggleModal","isModalOpen","useEffect","window","addEventListener","handleEsc","removeEventListener","e","code","createPortal","Modal","open","onClose","currentTarget","target","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","IconButton","onClick","Close","PropTypes","src","Joi","require","contactAddValidator","object","contactName","string","min","max","required","messages","contactPhone","ContactForm","edit","id","useState","setContactName","setContactPhone","contacts","useSelector","getContacts","dispatch","useDispatch","editContact","find","contact","_id","name","phone","handleChange","value","useForm","resolver","joiResolver","register","handleSubmit","errors","formState","m","width","padding","noValidate","autoComplete","onSubmit","normalizeNewContactName","toLowerCase","alert","addContact","align","color","mb","display","flexDirection","gap","FormControl","TextField","type","label","onChange","paddingLeft","message","Button","size","text","marginLeft","ContactInfo","setIsModalOpen","ListItem","secondaryAction","flexGrow","maxWidth","Edit","edge","deleteContact","onDeliteContact","Delete","ListItemAvatar","Avatar","Phone","ListItemText","ContactsInfo","filter","getFilter","filtredContacts","normalizeFilter","includes","toFiltredContacts","List","disablePadding","marginRight","map","Filter","changeFilter","ContastsSkeleton","item","Card","alignItems","Skeleton","height","isLoading","getIsLoading","error","getError","isFilterOpen","setIsFilterOpen","fetchContacts","AddCircle","fontSize","Search"],"sourceRoot":""}